package languageModel;

import org.apache.commons.io.FileUtils;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

/**
 * A class that allows a user to select the file they want to parse,
 * via  a GUI. The selected file is then parsed into a string variable.
 *
 * @author Shaquille Momoh
 */
public class ParseCorpus {
    /**
     * chooser allows users to select a file by navigating through
     * directories
     */
    private static JFileChooser chooser = new JFileChooser(System.getProperties().getProperty("user.dir"));

    /**
     * Read a file into a string.
     *
     * @return returns a string containing all text in the file.
     */
    public static String readFile(Scanner input) {
        return input.useDelimiter("\\Z").next();
    }

    /**
     * Brings up chooser for user to select a file or  a directory to be parsed.
     *
     * @return Scanner for user selected file, null if file not found.
     * @throws IOException
     */
    public String processFiles() throws IOException {
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setDialogTitle("Select a File or a Directory as your Corpus");
        String text = "";

        int retval = chooser.showOpenDialog(null);

        if (retval == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            Scanner s;

            if (f.isDirectory()) {

                File[] filesInDirectory = chooser.getSelectedFile().listFiles();

                // Removing the 'DS.store' file generated by OS X.
                if (System.getProperty("os.name").equals("Mac OS X")) {
                    filesInDirectory = Arrays.copyOfRange(filesInDirectory, 1, filesInDirectory.length);
                }
                for (int i = 0; i < filesInDirectory.length; i++) {
                    File file = filesInDirectory[i];
                    String content = "";
                    if (file.isFile()) {
                        content = FileUtils.readFileToString(file);
                    }

                    text += content;
                }
                return text;
            } else {
                s = new Scanner(f);
                text = readFile(s);
                return text;
            }

        }
        return null;
    }
}
